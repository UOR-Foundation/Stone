name: Build and Release GitHub Action

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Run tests
        run: npm test
      
      - name: Create action.yml
        run: |
          cat > action.yml << EOF
          name: 'Stone - AI Software Factory'
          description: 'A structured system for orchestrating GitHub-based development using Claude Code'
          author: 'UOR Foundation'
          
          inputs:
            github-token:
              description: 'GitHub token for repository access'
              required: true
            action:
              description: 'Action to perform (init, process, status)'
              required: true
              default: 'status'
            issue-number:
              description: 'Issue number to process'
              required: false
            repository:
              description: 'Repository name in format owner/repo'
              required: false
          
          runs:
            using: 'node20'
            main: 'dist/github-actions/index.js'
          
          branding:
            icon: 'code'
            color: 'blue'
          EOF
      
      - name: Create action entry point
        run: |
          mkdir -p src/github-actions
          
          cat > src/github-actions/index.ts << EOF
          import * as core from '@actions/core';
          import * as github from '@actions/github';
          import { init, processEvent, runWorkflow } from '../index';
          
          async function run(): Promise<void> {
            try {
              // Get inputs
              const token = core.getInput('github-token', { required: true });
              const action = core.getInput('action', { required: true });
              const issueNumber = core.getInput('issue-number');
              const repository = core.getInput('repository');
              
              // Parse repository if provided
              let owner = '';
              let repo = '';
              
              if (repository) {
                const parts = repository.split('/');
                if (parts.length === 2) {
                  owner = parts[0];
                  repo = parts[1];
                } else {
                  throw new Error('Repository must be in format owner/repo');
                }
              } else {
                // Get from context
                owner = github.context.repo.owner;
                repo = github.context.repo.repo;
              }
              
              // Execute action
              switch (action) {
                case 'init':
                  await init({ owner, name: repo, token });
                  break;
                  
                case 'process':
                  if (!issueNumber) {
                    throw new Error('Issue number is required for process action');
                  }
                  await runWorkflow('feature', parseInt(issueNumber), { token });
                  break;
                  
                case 'status':
                  // Implement status reporting
                  core.info('Status reporting not yet implemented');
                  break;
                  
                default:
                  throw new Error(\`Unknown action: \${action}\`);
              }
              
              core.info('Stone action completed successfully');
            } catch (error) {
              if (error instanceof Error) {
                core.setFailed(error.message);
              } else {
                core.setFailed('An unknown error occurred');
              }
            }
          }
          
          run();
          EOF
          
          # Add @actions/core and @actions/github as dependencies
          npm install --save @actions/core @actions/github
          
          # Rebuild with new dependencies
          npm run build
      
      - name: Create action README
        run: |
          cat > ACTION_README.md << EOF
          # Stone GitHub Action
          
          This GitHub Action provides a convenient way to use Stone, a software factory for GitHub-based development using Claude Code.
          
          ## Usage
          
          ```yaml
          name: Stone Workflow
          
          on:
            issues:
              types: [opened, labeled]
          
          jobs:
            stone:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                
                - name: Run Stone
                  uses: uor-foundation/stone@v1
                  with:
                    github-token: \${{ secrets.GITHUB_TOKEN }}
                    action: process
                    issue-number: \${{ github.event.issue.number }}
          ```
          
          ## Inputs
          
          | Name | Description | Required | Default |
          |------|-------------|----------|---------|
          | github-token | GitHub token for repository access | Yes | |
          | action | Action to perform (init, process, status) | Yes | status |
          | issue-number | Issue number to process | No | |
          | repository | Repository name in format owner/repo | No | Current repository |
          
          ## Actions
          
          - **init**: Initialize Stone in a repository
          - **process**: Process a specific issue
          - **status**: Get status of all Stone issues
          
          ## License
          
          MIT
          EOF
      
      - name: Archive action artifacts
        uses: actions/upload-artifact@v4
        with:
          name: action-artifacts
          path: |
            action.yml
            ACTION_README.md
            dist/
            LICENSE